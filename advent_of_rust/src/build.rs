use std::{io::Write, path::PathBuf};

fn write_header(file: &mut std::fs::File) -> Result<(), std::io::Error> {
    writeln!(
        file,
        "// This file was generated by build.rs.\n// Do not modify directly\n"
    )
}

fn create_year_mod(year_dir: &PathBuf) -> Result<(), std::io::Error> {
    let mut solutions: Vec<String> = vec![];
    let mut year_mod_path = year_dir.clone();
    year_mod_path.push("mod.rs");
    let mut year_mod_file = std::fs::File::create(&year_mod_path).unwrap();
    write_header(&mut year_mod_file)?;

    for day in std::fs::read_dir(year_dir).unwrap() {
        let fname = day.unwrap().file_name();
        let fname = fname.to_str().unwrap();
        let fname = &fname[0..fname.find('.').unwrap()];
        if fname.starts_with("day") {
            writeln!(year_mod_file, "mod {};", fname)?;
            solutions.push(format!(
                "Box::new(crate::{}::{}::get_solution())",
                year_dir.file_name().unwrap().to_str().unwrap(),
                fname
            ));
        };
    }

    let contents = format!(
        r#"
pub fn get_solutions() -> Vec<Box<dyn crate::IsCorrect>> {{
    vec![
        {}
    ]
}}
                "#,
        solutions.join(",\n        ")
    );

    writeln!(year_mod_file, "\n{}", contents.trim())
}

fn main() {
    let mut include_file = std::fs::File::create("./src/include.rs").unwrap();
    write_header(&mut include_file).unwrap();

    let years = std::fs::read_dir("./src/").unwrap();
    let mut year_solutions = vec![];

    for year in years.flatten() {
        if year.metadata().unwrap().is_dir() {
            let year_path = year.path();
            if year_path
                .file_name()
                .unwrap()
                .to_str()
                .unwrap()
                .starts_with('y')
            {
                create_year_mod(&year_path).unwrap();
            }

            year_solutions.push(format!(
                "({}, crate::{}::get_solutions())",
                year_path
                    .file_name()
                    .unwrap()
                    .to_str()
                    .unwrap()
                    .chars()
                    .filter(char::is_ascii_digit)
                    .collect::<String>()
                    .parse::<usize>()
                    .unwrap(),
                year_path.file_name().unwrap().to_str().unwrap()
            ));
        }
    }

    let contents = format!(
        r#"
#[must_use]
pub fn get_all_years() -> Vec<(u32, Vec<Box<dyn crate::IsCorrect>>)> {{
    vec![
        {},
    ]
}}
"#,
        year_solutions.join(",\n        ")
    );
    writeln!(include_file, "{}", contents.trim()).unwrap();
}
